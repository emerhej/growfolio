{"version":3,"sources":["app.js","environment.js","main.js","performance-table.js","portfolio.js","transaction-table.js","web-api.js","resources/index.js","resources/elements/loading-indicator.js"],"names":["App","inject","api","configureRouter","config","router","title","map","route","moduleId","debug","testing","configure","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","plugin","feature","developmentLogging","start","then","setRoot","PerformanceTable","holdings","_getTransactions","getTransactionList","transactions","created","_loadData","holdingMap","forEach","trsc","symbol","sellTransactions","buyTransactions","cost","type","push","_calcHoldingCost","Object","values","keys","holding","soldShares","reduce","acc","cur","shares","leftShares","price","commission","TRSC","PERF","Portfolio","name","currentTable","tables","selectTable","table","TransactionTable","latency","id","getId","date","Date","WebAPI","isRequesting","_sendArray","getHoldingList","data","setTimeout","resolve","slice","getHoldingDetails","found","filter","x","JSON","parse","stringify","saveHolding","instance","index","indexOf","globalResources","nprogress","LoadingIndicator","defaultValue","on","loadingChanged","newValue","done"],"mappings":";;;;;;;;;;;;;;MAEaA,cAAAA;QACJC,2BAAS;AAAE,aAAO,gBAAP;AAAkB;;AAEpC,iBAAYC,GAAZ,EAAiB;AAAA;;AACf,WAAKA,GAAL,GAAWA,GAAX;AACD;;kBAEDC,2CAAgBC,QAAQC,QAAO;AAC7BD,aAAOE,KAAP,GAAe,WAAf;AACAF,aAAOG,GAAP,CAAW,CACT,EAAEC,OAAO,EAAT,EAA0BC,UAAU,WAApC,EAAmDH,OAAO,WAA1D,EADS,CAAX;;AAKA,WAAKD,MAAL,GAAcA,MAAd;AACD;;;;;;;;;;;oBCjBY;AACbK,WAAO,IADM;AAEbC,aAAS;AAFI;;;;;;;;UCUCC,YAAAA;;;;;;;;;;AAPhBC,UAAQT,MAAR,CAAe;AACbU,qBAAiB,sBAAYJ,KADhB;AAEbK,cAAU;AACRC,wBAAkB;AADV;AAFG,GAAf;;AAOO,WAASJ,SAAT,CAAmBK,OAAnB,EAA4B;AACjCA,YAAQC,GAAR,CACGC,qBADH,GAEGC,MAFH,CAEU,eAFV,EAGGC,OAHH,CAGW,WAHX;;AAKA,QAAI,sBAAYX,KAAhB,EAAuB;AACrBO,cAAQC,GAAR,CAAYI,kBAAZ;AACD;;AAED,QAAI,sBAAYX,OAAhB,EAAyB;AACvBM,cAAQC,GAAR,CAAYE,MAAZ,CAAmB,iBAAnB;AACD;;AAEDH,YAAQM,KAAR,GAAgBC,IAAhB,CAAqB;AAAA,aAAMP,QAAQQ,OAAR,EAAN;AAAA,KAArB;AACD;;;;;;;;;;;;;;;;;;QCvBYC,2BAAAA;AAGT,kCAAYxB,GAAZ,EAAiB;AAAA;;AACb,iBAAKA,GAAL,GAAWA,GAAX;AACA,iBAAKyB,QAAL,GAAgB,EAAhB;AACH;;mCAEDC,+CAAmB;AAAA;;AACf,mBAAO,KAAK1B,GAAL,CAAS2B,kBAAT,GACNL,IADM,CACD;AAAA,uBAAgB,MAAKM,YAAL,GAAoBA,YAApC;AAAA,aADC,CAAP;AAEH;;mCAEDC,6BAAU;AACN,iBAAKC,SAAL;AACH;;mCAEDA,iCAAY;AAAA;;AACR,iBAAKJ,gBAAL,GAAwBJ,IAAxB,CAA8B,YAAM;AAChC,oBAAIS,aAAa,EAAjB;;AAEA,uBAAKH,YAAL,CAAkBI,OAAlB,CAA0B,UAACC,IAAD,EAAU;AAChC,wBAAI,CAACF,WAAWE,KAAKC,MAAhB,CAAL,EAA8B;AAC1BH,mCAAWE,KAAKC,MAAhB,IAA0B;AACtBA,oCAAQD,KAAKC,MADS;AAEtBC,8CAAkB,EAFI;AAGtBC,6CAAiB,EAHK;AAItBC,kCAAM;AAJgB,yBAA1B;AAMH;AACD,wBAAIJ,KAAKK,IAAL,KAAc,KAAlB,EAAyB;AACrBP,mCAAWE,KAAKC,MAAhB,EAAwBE,eAAxB,CAAwCG,IAAxC,CAA6CN,IAA7C;AACH,qBAFD,MAEO;AACHF,mCAAWE,KAAKC,MAAhB,EAAwBC,gBAAxB,CAAyCI,IAAzC,CAA8CN,IAA9C;AACH;AACJ,iBAdD;;AAgBA,uBAAKO,gBAAL,CAAsBT,UAAtB;AACA,uBAAKN,QAAL,GAAgBgB,OAAOC,MAAP,CAAcX,UAAd,CAAhB;AACH,aArBD;AAsBH;;mCAEDS,6CAAiBf,UAAU;AACvBgB,mBAAOE,IAAP,CAAYlB,QAAZ,EAAsBO,OAAtB,CAA8B,UAACE,MAAD,EAAY;AACtC,oBAAIU,UAAUnB,SAASS,MAAT,CAAd;AACA,oBAAIW,aAAaD,QAAQT,gBAAR,CAAyBW,MAAzB,CAAgC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvD,2BAAOD,MAAMC,IAAIC,MAAjB;AACP,iBAFgB,EAEd,CAFc,CAAjB;;AAOAL,wBAAQP,IAAR,GAAeO,QAAQR,eAAR,CAAwBU,MAAxB,CAA+B,UAACC,GAAD,EAAMd,IAAN,EAAe;AACzD,wBAAIiB,mBAAJ;AAAA,wBAAgBb,aAAhB;;AAEA,wBAAIJ,KAAKgB,MAAL,GAAcJ,UAAlB,EAA8B;AAC1BK,qCAAa,CAAb;AACAL,sCAAcZ,KAAKgB,MAAnB;AACH,qBAHD,MAGO;AACHC,qCAAajB,KAAKgB,MAAL,GAAcJ,UAA3B;AACAA,qCAAa,CAAb;AACH;AACDR,2BAAQa,aAAajB,KAAKgB,MAAnB,IACFhB,KAAKgB,MAAL,GAAchB,KAAKkB,KAAnB,GAA2BlB,KAAKmB,UAD9B,CAAP;AAEA,2BAAOL,MAAMV,IAAb;AACH,iBAbc,EAaZ,CAbY,CAAf;AAcH,aAvBD;AAwBH;;;gBAlEMtC,SAAS;;;;;;;;;;;;;;;;;;ACDpB,QAAMsD,OAAO,cAAb;AACA,QAAMC,OAAO,aAAb;;QAEaC,oBAAAA;AAGT,2BAAYvD,GAAZ,EAAiB;AAAA;;AACb,iBAAKA,GAAL,GAAWA,GAAX;AACA,iBAAKwD,IAAL,GAAY,IAAZ;AACA,iBAAKC,YAAL,GAAoBJ,IAApB;AACA,iBAAKK,MAAL,GAAc,CAACL,IAAD,EAAOC,IAAP,CAAd;AACH;;4BAEDK,mCAAYC,OAAO;AACf,iBAAKH,YAAL,GAAoBG,KAApB;AACH;;;gBAXM7D,SAAS;;;;;;;;;;;;;;;;;;QCJP8D,2BAAAA;AAGT,kCAAY7D,GAAZ,EAAiB;AAAA;;AACb,iBAAKA,GAAL,GAAWA,GAAX;AACH;;mCAED6B,6BAAU;AAAA;;AACN,iBAAK7B,GAAL,CAAS2B,kBAAT,GACCL,IADD,CACM;AAAA,uBAAgB,MAAKM,YAAL,GAAoBA,YAApC;AAAA,aADN;AAEH;;;gBATM7B,SAAS;;;;;;;;;;;;;;;ACHpB,MAAI+D,UAAU,GAAd;AACA,MAAIC,KAAK,CAAT;;AAEA,WAASC,KAAT,GAAgB;AACd,WAAO,EAAED,EAAT;AACD;;AAED,MAAItC,WAAW,CACb;AACEsC,QAAIC,OADN;AAEE9B,YAAQ,MAFV;AAGEiB,WAAO;AAHT,GADa,CAAf;;AAQA,MAAIvB,eAAe,CACjB;AACEmC,QAAIC,OADN;AAEE9B,YAAQ,MAFV;AAGEI,UAAM,KAHR;AAIEW,YAAQ,IAJV;AAKEE,WAAO,IALT;AAMEC,gBAAY,KANd;AAOEa,UAAM,IAAIC,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,CAAnB;AAPR,GADiB,EAUjB;AACEH,QAAIC,OADN;AAEE9B,YAAQ,MAFV;AAGEI,UAAM,KAHR;AAIEW,YAAQ,IAJV;AAKEE,WAAO,IALT;AAMEC,gBAAY,KANd;AAOEa,UAAM,IAAIC,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,CAAnB;AAPR,GAViB,EAmBjB;AACEH,QAAIC,OADN;AAEE9B,YAAQ,MAFV;AAGEI,UAAM,MAHR;AAIEW,YAAQ,IAJV;AAKEE,WAAO,IALT;AAMEC,gBAAY,IANd;AAOEa,UAAM,IAAIC,IAAJ,CAAS,IAAT,EAAe,EAAf,EAAmB,EAAnB;AAPR,GAnBiB,CAAnB;;MA8BaC,iBAAAA;;;;WACXC,eAAe;;;qBAEfzC,mDAAqB;AACnB,aAAO,KAAK0C,UAAL,CAAgBzC,YAAhB,CAAP;AACD;;qBAED0C,2CAAgB;AACd,aAAO,KAAKD,UAAL,CAAgB5C,QAAhB,CAAP;AACD;;qBAED4C,iCAAWE,MAAM;AAAA;;AACf,WAAKH,YAAL,GAAoB,IAApB;AACA,aAAO,IAAIzD,OAAJ,CAAY,mBAAW;AAC5B6D,mBAAW,YAAM;AAEfC,kBAAQF,KAAKG,KAAL,CAAW,CAAX,CAAR;AACA,gBAAKN,YAAL,GAAoB,KAApB;AACD,SAJD,EAIGN,OAJH;AAKD,OANM,CAAP;AAOD;;qBAEDa,+CAAkBZ,IAAG;AAAA;;AACnB,WAAKK,YAAL,GAAoB,IAApB;AACA,aAAO,IAAIzD,OAAJ,CAAY,mBAAW;AAC5B6D,mBAAW,YAAM;AACf,cAAII,QAAQnD,SAASoD,MAAT,CAAgB;AAAA,mBAAKC,EAAEf,EAAF,IAAQA,EAAb;AAAA,WAAhB,EAAiC,CAAjC,CAAZ;AACAU,kBAAQM,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAeL,KAAf,CAAX,CAAR;AACA,iBAAKR,YAAL,GAAoB,KAApB;AACD,SAJD,EAIGN,OAJH;AAKD,OANM,CAAP;AAOD;;qBAEDoB,mCAAYtC,SAAQ;AAAA;;AAClB,WAAKwB,YAAL,GAAoB,IAApB;AACA,aAAO,IAAIzD,OAAJ,CAAY,mBAAW;AAC5B6D,mBAAW,YAAM;AACf,cAAIW,WAAWJ,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAerC,OAAf,CAAX,CAAf;AACA,cAAIgC,QAAQnD,SAASoD,MAAT,CAAgB;AAAA,mBAAKC,EAAEf,EAAF,IAAQnB,QAAQmB,EAArB;AAAA,WAAhB,EAAyC,CAAzC,CAAZ;;AAEA,cAAGa,KAAH,EAAS;AACP,gBAAIQ,QAAQ3D,SAAS4D,OAAT,CAAiBT,KAAjB,CAAZ;AACAnD,qBAAS2D,KAAT,IAAkBD,QAAlB;AACD,WAHD,MAGK;AACHA,qBAASpB,EAAT,GAAcC,OAAd;AACAvC,qBAASc,IAAT,CAAc4C,QAAd;AACD;;AAED,iBAAKf,YAAL,GAAoB,KAApB;AACAK,kBAAQU,QAAR;AACD,SAdD,EAcGrB,OAdH;AAeD,OAhBM,CAAP;AAiBD;;;;;;;;;;;YCjGapD,YAAAA;AAAT,aAASA,SAAT,CAAmBR,MAAnB,EAA2B;AAC9BA,eAAOoF,eAAP,CAAuB,CAAC,8BAAD,CAAvB;AACH;;;;;;;;;;MCFWC;;;;;;;;;;;;;;;;;;;;;;;;;AAGL,MAAIC,8CAAmB,kCAC5B,8BAAO,CAAC,yBAAD,CAAP,CAD4B,EAE5B,gCAAS,EAAChC,MAAM,SAAP,EAAkBiC,cAAc,KAAhC,EAAT,CAF4B,EAG5BC,EAH4B;AAAA;AAAA;AAAA;;AAAA,qBAI5BC,cAJ4B,2BAIbC,QAJa,EAIJ;AACtB,UAAIA,QAAJ,EAAc;AACZL,kBAAUlE,KAAV;AACD,OAFD,MAEO;AACLkE,kBAAUM,IAAV;AACD;AACF,KAV2B;;AAAA;AAAA,MAAvB","file":"app-bundle.js","sourcesContent":["import {WebAPI} from './web-api';\n\nexport class App {\n  static inject() { return [WebAPI]; }\n\n  constructor(api) {\n    this.api = api;\n  }\n\n  configureRouter(config, router){\n    config.title = 'Growfolio';\n    config.map([\n      { route: '',              moduleId: 'portfolio',   title: 'Portfolio'},\n      // { route: 'contacts/:id',  moduleId: 'contact-detail', name:'contacts' }\n    ]);\n\n    this.router = router;\n  }\n}","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .plugin('aurelia-table')\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {WebAPI} from './web-api';\n\nexport class PerformanceTable {\n    static inject = [WebAPI];\n\n    constructor(api) {\n        this.api = api;\n        this.holdings = {};\n    }\n\n    _getTransactions() {\n        return this.api.getTransactionList()\n        .then(transactions => this.transactions = transactions);\n    }\n\n    created() {\n        this._loadData();\n    }\n\n    _loadData() {\n        this._getTransactions().then( () => {\n            let holdingMap = {};\n            //TODO sort by date\n            this.transactions.forEach((trsc) => {\n                if (!holdingMap[trsc.symbol]) {\n                    holdingMap[trsc.symbol] = {\n                        symbol: trsc.symbol,\n                        sellTransactions: [],\n                        buyTransactions: [],\n                        cost: 0\n                    };\n                }\n                if (trsc.type === 'buy') {\n                    holdingMap[trsc.symbol].buyTransactions.push(trsc)\n                } else {\n                    holdingMap[trsc.symbol].sellTransactions.push(trsc);\n                }\n            });\n\n            this._calcHoldingCost(holdingMap);\n            this.holdings = Object.values(holdingMap);\n        });\n    }\n\n    _calcHoldingCost(holdings) {\n        Object.keys(holdings).forEach((symbol) => {\n            let holding = holdings[symbol];\n            let soldShares = holding.sellTransactions.reduce((acc, cur) => {\n                    return acc + cur.shares;\n            }, 0);\n\n            // minus sold shares from each buy transaction until sold shares\n            // is empty. Calculate the buy cost based on left over shares on\n            // each transaction.\n            holding.cost = holding.buyTransactions.reduce((acc, trsc) => {\n                let leftShares, cost;\n\n                if (trsc.shares < soldShares) {\n                    leftShares = 0;\n                    soldShares -= trsc.shares;\n                } else {\n                    leftShares = trsc.shares - soldShares;\n                    soldShares = 0;\n                }\n                cost = (leftShares / trsc.shares) *\n                    (trsc.shares * trsc.price + trsc.commission);\n                return acc + cost;\n            }, 0);\n        });\n    }\n}","import {WebAPI} from './web-api';\n\nconst TRSC = \"transactions\";\nconst PERF = \"performance\";\n\nexport class Portfolio {\n    static inject = [WebAPI];\n\n    constructor(api) {\n        this.api = api;\n        this.name = \"p1\";\n        this.currentTable = TRSC;\n        this.tables = [TRSC, PERF];\n    }\n\n    selectTable(table) {\n        this.currentTable = table;\n    }\n}","import {WebAPI} from './web-api';\n\nexport class TransactionTable {\n    static inject = [WebAPI];\n\n    constructor(api) {\n        this.api = api;\n    }\n\n    created() {\n        this.api.getTransactionList()\n        .then(transactions => this.transactions = transactions);\n    }\n}","let latency = 200;\nlet id = 0;\n\nfunction getId(){\n  return ++id;\n}\n\nlet holdings = [\n  {\n    id: getId(),\n    symbol: 'YHOO',\n    price: 123\n  }\n];\n\nlet transactions = [\n  {\n    id: getId(),\n    symbol: 'YHOO',\n    type: 'buy',\n    shares: 1000,\n    price: 1.00,\n    commission: 50.00,\n    date: new Date(2016, 11, 7)\n  },\n  {\n    id: getId(),\n    symbol: 'YHOO',\n    type: 'buy',\n    shares: 1000,\n    price: 1.10,\n    commission: 30.00,\n    date: new Date(2016, 11, 8)\n  },\n  {\n    id: getId(),\n    symbol: 'YHOO',\n    type: 'sell',\n    shares: 1500,\n    price: 1.20,\n    commission: 0.00,\n    date: new Date(2016, 11, 15)\n  }\n]\n\nexport class WebAPI {\n  isRequesting = false;\n\n  getTransactionList() {\n    return this._sendArray(transactions);\n  }\n\n  getHoldingList(){\n    return this._sendArray(holdings);\n  }\n\n  _sendArray(data) {\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // return a clone of data\n        resolve(data.slice(0));\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  getHoldingDetails(id){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let found = holdings.filter(x => x.id == id)[0];\n        resolve(JSON.parse(JSON.stringify(found)));\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  saveHolding(holding){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let instance = JSON.parse(JSON.stringify(holding));\n        let found = holdings.filter(x => x.id == holding.id)[0];\n\n        if(found){\n          let index = holdings.indexOf(found);\n          holdings[index] = instance;\n        }else{\n          instance.id = getId();\n          holdings.push(instance);\n        }\n\n        this.isRequesting = false;\n        resolve(instance);\n      }, latency);\n    });\n  }\n}\n","export function configure(config) {\n    config.globalResources(['./elements/loading-indicator']);\n}\n","import * as nprogress from 'nprogress';\nimport {bindable, noView, decorators} from 'aurelia-framework';\n\nexport let LoadingIndicator = decorators(\n  noView(['nprogress/nprogress.css']),\n  bindable({name: 'loading', defaultValue: false})\n).on(class {\n  loadingChanged(newValue){\n    if (newValue) {\n      nprogress.start();\n    } else {\n      nprogress.done();\n    }\n  }\n});"],"sourceRoot":"../src"}