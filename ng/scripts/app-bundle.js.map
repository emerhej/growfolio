{"version":3,"sources":["app.js","debug.js","environment.js","main.js","messages.js","web-api.js","performance-table/performance-table.js","portfolio/portfolio.js","resources/index.js","services/api.js","services/holding-service.js","transaction-form/transaction-form.js","transaction-table/transaction-table.js","value-converters/capitalize.js","value-converters/date-format.js","value-converters/object-keys-value-converter.js","value-converters/object-values-value-converter.js","value-converters/percent.js","resources/elements/loading-indicator.js"],"names":["App","inject","api","configureRouter","config","router","title","map","route","moduleId","Debug","bindingContext","updateJson","json","undefined","JSON","stringify","bind","interval","setInterval","unbind","clearInterval","debug","testing","configure","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","plugin","feature","developmentLogging","start","then","setRoot","TransactionAdded","transaction","latency","id","getId","holdings","symbol","price","transactions","type","shares","commission","date","Date","WebAPI","isRequesting","getTransactionList","_sendArray","getHoldingList","data","setTimeout","resolve","slice","getHoldingDetails","found","filter","x","parse","saveTransaction","console","log","instance","index","indexOf","push","REFRESH_INTERVAL","UP","DOWN","PerformanceTable","holdingService","ea","load","refresh","_subscriptEvents","numberColor","number","subscribe","TRSC","PERF","Portfolio","name","currentTable","tables","transactionFormOpened","selectTable","table","toggleTransactionForm","globalResources","client","queryParams","params","esc","encodeURIComponent","Object","keys","k","join","makeUrl","url","API","getQuotes","symbols","symbolsStr","q","format","diagnostics","env","callback","fetch","response","result","query","results","quote","Array","isArray","HoldingService","realAPI","_loadTransactionsToHolding","_loadQuotes","_calculate","forEach","trsc","holding","find","sellTransactions","buyTransactions","cost","quotes","_calcHoldingCost","mkt_value","LastTradePriceOnly","gain","gain_percent","days_gain","Change","soldShares","reduce","acc","cur","leftShares","TransactionForm","types","save","temp","publish","TransactionTable","created","CapitalizeValueConverter","toView","string","charAt","toUpperCase","DateFormatValueConverter","value","ObjectKeysValueConverter","obj","prop","hasOwnProperty","ObjectValuesValueConverter","PercentValueConverter","nprogress","LoadingIndicator","defaultValue","on","loadingChanged","newValue","done"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {WebAPI} from './web-api';\n\nexport class App {\n  static inject() { return [WebAPI]; }\n\n  constructor(api) {\n    this.api = api;\n  }\n\n  configureRouter(config, router){\n    config.title = 'Growfolio';\n    config.map([\n      { route: '',              moduleId: 'portfolio',   title: 'Portfolio'},\n      // { route: 'contacts/:id',  moduleId: 'contact-detail', name:'contacts' }\n    ]);\n\n    this.router = router;\n  }\n}","export class Debug {\n  bindingContext = null;\n\n  updateJson() {\n    if (this.bindingContext === null) {\n      this.json = 'null';\n    } else if (this.bindingContext === undefined) {\n      this.json = 'undefined'\n    } else {\n      // todo: use a stringify function that can handle circular references.\n      this.json = JSON.stringify(this.bindingContext, null, 2);\n    }\n  }\n\n  bind(bindingContext) {\n    this.bindingContext = bindingContext;\n    this.updateJson();\n    this.interval = setInterval(this.updateJson, 150);\n  }\n\n  unbind() {\n    this.bindingContext = null;\n    clearInterval(this.interval);\n  }\n}","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .plugin('aurelia-table')\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class TransactionAdded {\n  constructor(transaction){\n    this.transaction = transaction;\n  }\n}","let latency = 200;\nlet id = 0;\n\nfunction getId(){\n  return ++id;\n}\n\nlet holdings = [\n  {\n    id: getId(),\n    symbol: 'YHOO',\n    price: 123\n  }\n];\n\nlet transactions = [\n  {\n    id: getId(),\n    symbol: 'YHOO',\n    type: 'buy',\n    shares: 1000,\n    price: 40.00,\n    commission: 50.00,\n    date: new Date(2016, 11, 7)\n  },\n  {\n    id: getId(),\n    symbol: 'YHOO',\n    type: 'buy',\n    shares: 1000,\n    price: 40.10,\n    commission: 30.00,\n    date: new Date(2016, 11, 8)\n  },\n  {\n    id: getId(),\n    symbol: 'YHOO',\n    type: 'sell',\n    shares: 1500,\n    price: 41.20,\n    commission: 0.00,\n    date: new Date(2016, 11, 15)\n  }\n]\n\nexport class WebAPI {\n  isRequesting = false;\n\n  getTransactionList() {\n    return this._sendArray(transactions);\n  }\n\n  getHoldingList(){\n    return this._sendArray(holdings);\n  }\n\n  _sendArray(data) {\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // return a clone of data\n        resolve(data.slice(0));\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  getHoldingDetails(id){\n    this.isRequesting = true;\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let found = holdings.filter(x => x.id == id)[0];\n        resolve(JSON.parse(JSON.stringify(found)));\n        this.isRequesting = false;\n      }, latency);\n    });\n  }\n\n  saveTransaction(transaction){\n    this.isRequesting = true;\n    console.log(\"transaction is \", transaction);\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let instance = JSON.parse(JSON.stringify(transaction));\n        let found = transactions.filter(x => x.id == transaction.id)[0];\n\n        if(found){\n          let index = transactions.indexOf(found);\n          transactions[index] = instance;\n        }else{\n          instance.id = getId();\n          transactions.push(instance);\n        }\n        this.isRequesting = false;\n        resolve(instance);\n      }, latency);\n    });\n  }\n}\n","import {HoldingService} from '../services/holding-service';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {TransactionAdded} from '../messages';\n\nconst REFRESH_INTERVAL = 10000;\nconst UP = \"up\";\nconst DOWN = \"down\";\n\nexport class PerformanceTable {\n    static inject = [HoldingService, EventAggregator];\n\n    constructor(holdingService, ea) {\n        this.holdingService = holdingService;\n        this.ea = ea;\n        this.holdings = this.holdingService.holdings;\n        this.holdingService.load();\n        setInterval(() => this.holdingService.refresh(), REFRESH_INTERVAL);\n\n        this._subscriptEvents();\n    }\n\n    numberColor(number) {\n        if (number > 0) {\n            return UP;\n        }\n        if (number < 0) {\n            return DOWN;\n        }\n        return '';\n    }\n\n    _subscriptEvents() {\n        this.ea.subscribe(TransactionAdded, msg => this.holdingService.load());\n    }\n}","import {WebAPI} from '../web-api';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {TransactionAdded} from '../messages';\n\nconst TRSC = \"transactions\";\nconst PERF = \"performance\";\n\nexport class Portfolio {\n    static inject = [WebAPI, EventAggregator];\n\n    constructor(api, ea) {\n        this.api = api;\n        this.ea = ea;\n        this._subscriptEvents();\n        this.name = \"Portfolio1\";\n        this.currentTable = PERF;\n        this.tables = [PERF, TRSC];\n        this.transactionFormOpened = false;\n    }\n\n    selectTable(table) {\n        this.currentTable = table;\n    }\n\n    toggleTransactionForm() {\n        this.transactionFormOpened = !this.transactionFormOpened;\n    }\n\n    _subscriptEvents() {\n        this.ea.subscribe(TransactionAdded, () => this.transactionFormOpened = false);\n    }\n}","export function configure(config) {\n    config.globalResources(['./elements/loading-indicator']);\n}\n","// polyfills\nimport 'whatwg-fetch';\nimport {HttpClient} from 'aurelia-fetch-client';\n\nlet client = new HttpClient();\n\nfunction queryParams(params) {\n    let esc = encodeURIComponent;\n    return Object.keys(params)\n        .map(k => esc(k) + '=' + esc(params[k]))\n        .join('&');\n\n}\n\nfunction makeUrl(url, params) {\n    return url += (url.indexOf('?') === -1 ? '?' : '&') + queryParams(params);\n}\n\nexport class API {\n    constructor() {\n        this.client = client;\n    }\n\n    getQuotes(symbols) {\n        // concat symbols into \\\"YAHOO\\\",\\\"GOOGL\\\",\\\"AMZN\\\"\n        let symbolsStr = symbols.map((symbol) => '\\\"' + symbol + '\\\"').join(',')\n\n        let url = 'https://query.yahooapis.com/v1/public/yql';\n        let params = {\n          q: `select * from yahoo.finance.quotes where symbol in (${symbolsStr})`,\n          format:'json',\n          diagnostics: 'true',\n          env: 'store://datatables.org/alltableswithkeys',\n          callback: ''\n        }\n        return this.client.fetch(makeUrl(url, params))\n            .then(response => response.json())\n            .then(data => {\n                let result = data.query.results.quote;\n                //always return an Array.\n                return Array.isArray(result) ? result : [result];\n            })\n    }\n}","import {WebAPI} from '../web-api';\nimport {API} from './api';\n\nexport class HoldingService {\n    static inject = [WebAPI, API];\n\n    constructor(api, realAPI) {\n        this.api = api;\n        this.realAPI = realAPI;\n        this.holdings = [];\n    }\n\n    /*\n     * Load transaction, quotes and calculate properties.\n     */\n    load() {\n        return this._loadTransactionsToHolding().then(() => {\n            return this.refresh();\n        });\n    }\n\n    /*\n     * Refresh quotes and calculate properties.\n     */\n    refresh() {\n        return this._loadQuotes().then(() => this._calculate(this.holdings));\n    }\n\n    _loadTransactionsToHolding() {\n        // make it short\n        let map = this.holdings;\n        return this.api.getTransactionList().then((transactions) => {\n            //TODO sort by date\n            transactions.forEach((trsc) => {\n                let holding = map.find(x => x.symbol === trsc.symbol);\n                if (!holding) {\n                    holding = {\n                        symbol: trsc.symbol,\n                        sellTransactions: [],\n                        buyTransactions: [],\n                        cost: 0\n                    };\n                    map.push(holding);\n                }\n                if (trsc.type === 'buy') {\n                    holding.buyTransactions.push(trsc)\n                } else {\n                    holding.sellTransactions.push(trsc);\n                }\n            });\n        });\n    }\n\n    _loadQuotes() {\n        let symbols = this.holdings.map(x => x.symbol);\n        // save quote into each symbol holding\n        return this.realAPI.getQuotes(symbols).then(quotes => {\n            quotes.forEach(quote => {\n                let holding = this.holdings.find(x => x.symbol === quote.symbol);\n                holding.quote = quote;\n            })\n        });\n    }\n\n    _calculate(holdings) {\n        holdings.forEach((holding) => {\n            this._calcHoldingCost(holding);\n            holding.mkt_value = holding.shares * holding.quote.LastTradePriceOnly;\n            holding.gain = holding.mkt_value - holding.cost;\n            holding.gain_percent = holding.gain / holding.cost;\n            holding.days_gain = holding.shares * holding.quote.Change;\n        });\n    }\n\n    /*\n     * Calculate the cost for each symbol based on transcations.\n     * Add keys: shares, cost.\n     * @param holdings: Holdings array\n     */\n    _calcHoldingCost(holding) {\n        let soldShares = holding.sellTransactions.reduce((acc, cur) => {\n            return acc + cur.shares;\n        }, 0);\n        holding.cost = 0;\n        holding.shares = 0;\n\n        // minus sold shares from each buy transaction until sold shares\n        // is empty. Calculate the buy cost based on left over shares on\n        // each transaction.\n        holding.buyTransactions.forEach((trsc) => {\n            let leftShares, cost;\n\n            if (trsc.shares < soldShares) {\n                leftShares = 0;\n                soldShares -= trsc.shares;\n            } else {\n                leftShares = trsc.shares - soldShares;\n                soldShares = 0;\n            }\n            holding.cost += (leftShares / trsc.shares) *\n                (trsc.shares * trsc.price + trsc.commission);\n            holding.shares += leftShares;\n        }, 0);\n    };\n}","import {WebAPI} from '../web-api';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {TransactionAdded} from '../messages';\n\nexport class TransactionForm {\n    static inject = [WebAPI, EventAggregator];\n    types = ['buy', 'sell'];\n\n    constructor(api, ea) {\n        this.api = api;\n        this.ea = ea;\n        this.transaction = {type: 'buy'}\n    }\n\n    save() {\n        debugger;\n    }\n\n    get canSave() {\n        return this.transaction.symbol;\n    }\n\n    save() {\n        let temp = JSON.parse(JSON.stringify(this.transaction))\n        temp.date = new Date(temp.date);\n        this.api.saveTransaction(temp).then(transaction => {\n            this.ea.publish(new TransactionAdded(transaction));\n            this.transaction = {};\n        });\n    }\n}","import {WebAPI} from '../web-api';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {TransactionAdded} from '../messages';\n\nexport class TransactionTable {\n    static inject = [WebAPI, EventAggregator];\n\n    constructor(api, ea) {\n        this.api = api;\n        this.ea = ea;\n        this._subscriptEvents();\n        this.transactions = [];\n    }\n\n    created() {\n        this.load();\n    }\n\n    load() {\n        this.api.getTransactionList()\n        .then(transactions => this.transactions = transactions);\n    }\n\n    _subscriptEvents() {\n        this.ea.subscribe(TransactionAdded, msg => this.load());\n    }\n}","export class CapitalizeValueConverter {\n    toView(string) {\n        if (string) {\n            return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n    }\n}","import moment from 'moment';\n\nexport class DateFormatValueConverter {\n  toView(value, format) {\n    return moment(value).format(format);\n  }\n}","// A ValueConverter for iterating an Object's properties inside of a repeat.for in Aurelia\nexport class ObjectKeysValueConverter {\n    toView(obj) {\n        // Create a temporary array to populate with object keys\n        let temp = [];\n\n        // A basic for..in loop to get object properties\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...in\n        for (let prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                temp.push(prop);\n            }\n        }\n        debugger;\n        return temp;\n    }\n}\n\n/**\n * Usage\n * Shows how to use the custom ValueConverter to iterate an objects properties\n * aka its keys.\n * \n * <require from=\"ObjectKeys\"></require>\n * <li repeat.for=\"prop of myVmObject | objectKeys\">${prop}</li>\n */","// A ValueConverter for iterating an Object's values inside of a repeat.for in Aurelia\nexport class ObjectValuesValueConverter {\n    toView(obj) {\n        // Create a temporary array to populate with object values\n        let temp = [];\n\n        // A basic for..in loop to get values\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/for...of\n        for (let prop in obj) {\n            if (obj.hasOwnProperty(prop)) {\n                temp.push(obj[prop]);\n            }\n        }\n        debugger;\n        return temp;\n    }\n}\n\n/**\n * Usage\n * Shows how to use the custom ValueConverter to iterate an objects values\n *\n * <require from=\"./ObjectValuesValueConverter\"></require>\n * <li repeat.for=\"val of myVmObject | objectValues\">${val}</li>\n */\n","import numeral from 'numeral';\n\n// A ValueConverter to show 2 digit percentage\nexport class PercentValueConverter {\n    toView(number) {\n        return numeral(number).format('0.00%');\n    }\n}","import * as nprogress from 'nprogress';\nimport {bindable, noView, decorators} from 'aurelia-framework';\n\nexport let LoadingIndicator = decorators(\n  noView(['nprogress/nprogress.css']),\n  bindable({name: 'loading', defaultValue: false})\n).on(class {\n  loadingChanged(newValue){\n    if (newValue) {\n      nprogress.start();\n    } else {\n      nprogress.done();\n    }\n  }\n});"],"sourceRoot":"../src"}